/- # 問題60

与えられたノード数の高さ平衡二分木を構成する

## 問題文

高さが `H` の高さ平衡二分木を考えよう。この木が含みうる最大ノード数はいくつか？

明らかに、最大ノード数は`MaxN = 2^H − 1`である。しかし、最小ノード数 `MinN` はどうだろうか？これはより難しい問題である。再帰的な関係式を見つけ、それを関数 `minNodes` にして「高さ `H` の高さ平衡二分木における最小ノード数」を返すようにしてみよ。

一方で、逆の問いを立てることもできる。すなわち、与えられたノード数 N をもつ高さ平衡二分木の**最大の高さ H** はいくつか？これを計算する関数 `maxHeight` を書いてみよ。

これで、主問題に取り組める：
**与えられたノード数の高さ平衡二分木をすべて構成せよ。**

N = 15 の場合、高さ平衡二分木はいくつ存在するかを求めよ。

## 回答

`MinN` 関数は `MinN (h + 2) = MinN (h + 1) + MinN h + 1` という漸化式を満たすことがわかる。したがって、`MinN h` は次のように計算できる。
-/

def MinN (h : Nat) : Nat :=
  match h with
  | 0 => 0
  | 1 => 1
  | h + 2 => MinN (h + 1) + MinN h + 1
